import org.labkey.gradle.util.BuildUtils

sourceSets {
    engine {
        java {
            srcDirs = ['./enginesrc', "$project.buildDir/xb"]
        }
    }
}

dependencies {
    BuildUtils.addLabKeyDependency(project: project, config: "engineImplementation", depProjectPath: BuildUtils.getApiProjectPath(project.gradle))
    BuildUtils.addLabKeyDependency(project: project, config: "engineImplementation", depProjectPath: BuildUtils.getInternalProjectPath(project.gradle))
    engineImplementation "org.labkey:labkey-client-api:${project.version}"
    engineImplementation "org.apache.tomcat:tomcat-jasper:${apacheTomcatVersion}"
    engineImplementation "org.apache.tomcat:tomcat-jsp-api:${apacheTomcatVersion}"
    engineImplementation project.files(project.tasks.schemasCompile)

    implementation sourceSets.engine.output
    jspImplementation sourceSets.engine.output
    jspImplementation project.files(project.tasks.schemasCompile)
    BuildUtils.addLabKeyDependency(project: project, config: "jspImplementation", depProjectPath: project.path, depProjectConfig: 'compile')
    BuildUtils.addLabKeyDependency(project: project, config: "implementation", depProjectPath: BuildUtils.getPlatformModuleProjectPath(project.gradle, "assay"), depProjectConfig: "apiJarFile")
    BuildUtils.addLabKeyDependency(project: project, config: "modules", depProjectPath: BuildUtils.getPlatformModuleProjectPath(project.gradle, "experiment"), depProjectConfig: "published", depExtension: "module")
    BuildUtils.addLabKeyDependency(project: project, config: "modules", depProjectPath: BuildUtils.getPlatformModuleProjectPath(project.gradle, "query"), depProjectConfig: "published", depExtension: "module")
}

project.tasks.register("engineJar", Jar) {
    Jar jar ->
        jar.group = "Build"
        jar.description = "produce jar file for flow engine source"
        jar.archiveClassifier.set("engine")
        jar.from project.sourceSets.engine.output
        jar.archiveBaseName.set("${project.name}_engine")
        jar.destinationDirectory = project.file(project.labkey.explodedModuleLibDir)
        jar.dependsOn(project.tasks.schemasCompile)
}

project.tasks.engineJar.dependsOn(project.engineClasses)
project.tasks.assemble.dependsOn(project.tasks.engineJar)
project.tasks.module.dependsOn(project.tasks.engineJar)
